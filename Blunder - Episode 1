#include <iostream>
#include <string>
#include <vector>
#include <algorithm>

using namespace std;

// FUNCTIONS
string pathMod(char current) {
    string dir;
    if      ( current == 'S' )  { dir = "S"; }
    else if ( current == 'E' )  { dir = "E"; }
    else if ( current == 'N' )  { dir = "N"; }
    else if ( current == 'W' )  { dir = "W"; }
    return dir;
}
bool breaker(bool breaks) {
    if      ( breaks == true )   { return false; }
    else if ( breaks == false )  { return true; }
}
bool inverter(bool inverts) {
    if      ( inverts == true )   { return false; }
    else if ( inverts == false )  { return true; }
}
string teleporter(int x, int y, int teleONEx, int teleONEy, int teleTWOx, int teleTWOy) {
    if      ( x == teleONEx && y == teleONEy )  { return "1"; }
    else if ( x == teleTWOx && y == teleTWOy )  { return "2"; }
}
char nextDirection(string dir, int x, int y, string * map) {
    if      ( dir == "S" )  { return map[y+1][x]; }
    else if ( dir == "E" )  { return map[y][x+1]; }
    else if ( dir == "N" )  { return map[y-1][x]; }
    else if ( dir == "W" )  { return map[y][x-1]; }
}
string obs_South(bool inverts, bool breaks, char next) {
    if ( inverts == false ) {
        if ( next == 'X' ) {
            if ( breaks == true ) 
                 { return "S"; }
            else { return "E"; }}
        else if  ( next == '#' ) 
                 { return "E"; }}

    else if ( inverts == true ) {
        if ( next == 'X' ) {
            if ( breaks == true ) 
                 { return "S"; }
            else { return "W"; }}
        else if  ( next == '#' ) 
                 { return "W"; }}
}
string obs_East(bool inverts, bool breaks, char next, int x, int y, string * map, string lastDir) {
    if ( inverts == false ) {
        if ( next == 'X' ) {
            if ( breaks == true ) 
                 { return "E"; }
            else {
                if ( lastDir == "E" && ( map[y+1][x] == 'X' || map[y+1][x] == '#' ) ) 
                     { return "N"; }
                else { return "S"; }}}

        else if ( next == '#' ) { 
            if ( lastDir == "E" && ( map[y+1][x] == 'X' || map[y+1][x] == '#' ) ) 
                 { return "N"; }
            else { return "S"; }}}

    else if ( inverts == true ) {
        if ( next == 'X' ) {
            if ( breaks == true ) { return "E"; }
            else {
                if ( lastDir == "E" && ( map[y][x-1] == 'X' || map[y][x-1] == '#' ) ) 
                     { return "W"; }
                else { return "N"; }}}

        else if ( next == '#' ) { 
            if ( lastDir == "E" && ( map[y][x-1] == 'X' || map[y][x-1] == '#' ) ) 
                 { return "W"; }
            else { return "N"; }}}
}
string obs_North(bool inverts, bool breaks, char next, int x, int y, string * map, string lastDir) {
    if ( inverts == false ) {
        if ( next == 'X' ) {
            if ( breaks == true ) 
                 { return "N"; }
            else {
                if ( lastDir == "N" && ( map[y+1][x] == 'X' || map[y+1][x] == '#' ) ) 
                     { return "E"; }
                else { return "S"; }}}

        else if ( next == '#' ) { 
            if ( lastDir == "N" && ( map[y+1][x] == 'X' || map[y+1][x] == '#' ) ) 
                 { return "E";}
            else { return "S"; }}}

    else if ( inverts == true ) {
        if ( next == 'X' ) {
            if ( breaks == true )  
                 { return "N"; }
            else {
                if ( lastDir == "N" && ( map[y][x-1] == 'X' || map[y][x-1] == '#' ) ) 
                     { return "E"; }
                else { return "W"; }}}

        else if ( next == '#' ) { 
            if ( lastDir == "N" && ( map[y][x-1] == 'X' || map[y][x-1] == '#' ) ) 
                 { return "E";}
            else { return "W"; }}}
}
string obs_West(bool inverts, bool breaks, char next) {
    if ( inverts == false ) {
        if ( next == 'X' ) {
            if ( breaks == true ) 
                 { return "W"; }
            else { return "S"; }}
        else if  ( next == '#' ) 
                 { return "S"; }}

    else if ( inverts == true ) {
        if ( next == 'X' ) {
            if ( breaks == true ) 
                 { return "W"; }
            else { return "N"; }}
        else if  ( next == '#' ) 
                 { return "N"; }}
}

// MAIN PROGRAM
int main()
{
    // VARIABLES
    char current, next;
    bool inverts = false, breaks = false, done = false;
    int L, C, x, y, counter = 0, telCount = 0, teleONE[2], teleTWO[2];
    cin >> L >> C; cin.ignore();
    string map[L], route, dir = "S", lastDir = "S";

    // CREATE MAP
    for ( int i = 0; i < L; i++ ) {
        string row;
        getline(cin, row);
        map[i] = row;
        //cout << row << endl;
        
        for ( int k = 0; k < C; k++ ) {
            if ( map[i][k] == '@' ) {
                x = k;
                y = i; }
            if ( map[i][k] == 'T' ) {
                if ( telCount == 0 ) {
                    teleONE[0] = k;
                    teleONE[1] = i; }
                else if ( telCount == 1 ) {
                    teleTWO[0] = k;
                    teleTWO[1] = i; }
                telCount++; }}}

    // GAME LOOP START
    while ( done == false && counter < (L*C) ) {
        counter ++;

        // SOUTH 
        while ( dir == "S" ) {
            next = map[y+1][x];
            current = map[y][x];

            // OBSTACLES
            if ( next == '#' || next == 'X' ) { 
                dir = obs_South(inverts, breaks, next); 
                if ( dir == "S" ) { 
                    map[y+1][x] = ' '; 
                    next = map[y+1][x]; }}

            // PATH MODIFIER
            if ( next == 'S' || next == 'E' || next == 'N' || next == 'W' ) {
                y++;
                current = map[y][x];
                route.append("SOUTH\n");
                dir = pathMod(current); }

            // CLEAR PATH
            while ( next == ' ' || next == '@' || next == 'B' || next == 'I' || next == 'T' || next == '$' ) {
                y++;
                next = map[y+1][x];
                current = map[y][x];
                lastDir = "S";
                dir = "S";
                route.append("SOUTH\n");

                // BREAKER, INVERTER, TELEPORTER
                if      ( current == 'B' )  { breaks = breaker(breaks); }
                else if ( current == 'I' )  { inverts = inverter(inverts); }
                else if ( current == 'T' )  {
                    if ( teleporter(x, y, teleONE[0], teleONE[1], teleTWO[0], teleTWO[1]) == "1" ) {
                        x = teleTWO[0];
                        y = teleTWO[1]; } 
                    else if ( teleporter(x, y, teleONE[0], teleONE[1], teleTWO[0], teleTWO[1]) == "2" ) {
                        x = teleONE[0];
                        y = teleONE[1]; }
                    next = map[y+1][x];
                    current = map[y][x]; }

                // END POINT
                else if ( current == '$' ) {
                    break; }}

            // END POINT
            if ( current == '$' ) {
                done = true; 
                break; }

            // INVERSION CHECK
            if ( inverts == true )  { lastDir = "S"; }}
        

        // EAST
        while ( dir == "E" ) {
            next = map[y][x+1];
            current = map[y][x];

            // OBSTACLES
            if ( next == '#' || next == 'X' ) { 
                dir = obs_East(inverts, breaks, next, x, y, map, lastDir); 
                if ( dir == "E" ) { 
                    map[y][x+1] = ' '; 
                    next = map[y][x+1]; }}

            // PATH MODIFIER
            if ( next == 'S' || next == 'E' || next == 'N' || next == 'W' ) {
                x++;
                current = map[y][x];
                route.append("EAST\n");
                dir = pathMod(current); }

            // CLEAR PATH
            while ( next == ' ' || next == '@' || next == 'B' || next == 'I' || next == 'T' || next == '$' ) {
                x++;
                current = map[y][x];
                next = map[y][x+1];
                lastDir = "E";
                dir = "E";
                route.append("EAST\n");

                // BREAKER, INVERTER, TELEPORTER
                if      ( current == 'B' )  { breaks = breaker(breaks); }
                else if ( current == 'I' )  { inverts = inverter(inverts); }
                else if ( current == 'T' )  {
                    if ( teleporter(x, y, teleONE[0], teleONE[1], teleTWO[0], teleTWO[1]) == "1" ) {
                        x = teleTWO[0];
                        y = teleTWO[1]; } 
                    else if ( teleporter(x, y, teleONE[0], teleONE[1], teleTWO[0], teleTWO[1]) == "2" ) {
                        x = teleONE[0];
                        y = teleONE[1]; }
                    next = map[y][x+1];
                    current = map[y][x]; }

                // END POINT
                else if ( current == '$' ) {
                    break; }}

            // END POINT
            if ( current == '$' ) {
                done = true; 
                break; }

            // INVERSION CHECK
            if ( inverts == true )  { lastDir = "E"; }}
        
            
        // NORTH
        while ( dir == "N" ) {
            next = map[y-1][x];
            current = map[y][x];

            // OBSTACLES
            if ( next == '#' || next == 'X' ) { 
                dir = obs_North(inverts, breaks, next, x, y, map, lastDir); 
                if ( dir == "N" ) { 
                    map[y-1][x] = ' '; 
                    next = map[y-1][x]; }}

            // PATH MODIFIER
            if ( next == 'S' || next == 'E' || next == 'N' || next == 'W' ) {
                y--;
                current = map[y][x];
                route.append("NORTH\n");
                dir = pathMod(current); }

            // CLEAR PATH
            while ( next == ' ' || next == '@' || next == 'B' || next == 'I' || next == 'T' || next == '$' ) {
                y--;
                current = map[y][x];
                next = map[y-1][x];
                lastDir = "N";
                dir = "N";
                route.append("NORTH\n");
                
                // BREAKER, INVERTER, TELEPORTER
                if      ( current == 'B' )  { breaks = breaker(breaks); }
                else if ( current == 'I' )  { inverts = inverter(inverts); }
                else if ( current == 'T' )  {
                    if ( teleporter(x, y, teleONE[0], teleONE[1], teleTWO[0], teleTWO[1]) == "1" ) {
                        x = teleTWO[0];
                        y = teleTWO[1]; } 
                    else if ( teleporter(x, y, teleONE[0], teleONE[1], teleTWO[0], teleTWO[1]) == "2" ) {
                        x = teleONE[0];
                        y = teleONE[1]; }
                    next = map[y-1][x];
                    current = map[y][x]; }

                // END POINT
                else if ( current == '$' ) {
                    break; }}

            // END POINT
            if ( current == '$' ) {
                done = true; 
                break; }

            // INVERSION CHECK
            if ( inverts == true )  { lastDir = "N"; }}
        
        // WEST
        while ( dir == "W" ) {
            next = map[y][x-1];
            current = map[y][x];

            // OBSTACLES
            if ( next == '#' || next == 'X' ) { 
                dir = obs_West(inverts, breaks, next); 
                if ( dir == "W" ) { 
                    map[y][x-1] = ' '; 
                    next = map[y][x-1]; }}

            // PATH MODIFIER
            if ( next == 'S' || next == 'E' || next == 'N' || next == 'W' ) {
                x--;
                current = map[y][x];
                route.append("WEST\n");
                dir = pathMod(current); }

            // CLEAR PATH
            while ( next == ' ' || next == '@' || next == 'B' || next == 'I' || next == 'T' || next == '$' ) {
                x--;
                current = map[y][x];
                next = map[y][x-1];
                lastDir = "W";
                dir = "W";
                route.append("WEST\n");
                
                // BREAKER, INVERTER, TELEPORTER
                if      ( current == 'B' )  { breaks = breaker(breaks); }
                else if ( current == 'I' )  { inverts = inverter(inverts); }
                else if ( current == 'T' )  {
                    if ( teleporter(x, y, teleONE[0], teleONE[1], teleTWO[0], teleTWO[1]) == "1" ) {
                        x = teleTWO[0];
                        y = teleTWO[1]; } 
                    else if ( teleporter(x, y, teleONE[0], teleONE[1], teleTWO[0], teleTWO[1]) == "2" ) {
                        x = teleONE[0];
                        y = teleONE[1]; }
                    next = map[y][x-1];
                    current = map[y][x]; }

                // END POINT
                else if ( current == '$' ) {
                    break; }}

            // END POINT
            if ( current == '$' ) {
                done = true; 
                break; }

            // INVERSION CHECK
            if ( inverts == true) { lastDir = "W"; }}}
        
    // END GAME LOOP
    if ( counter < (L*C) ) { cout << route << endl; }
    else  { cout << "LOOP" << endl; }
}
